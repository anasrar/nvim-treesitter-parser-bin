name: Build and Release
on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 */2 * *" # run every 2 days at 2 AM UTC

jobs:
  linux:
    name: Build for linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        run: |
          git clone --depth 1 https://github.com/wbthomason/packer.nvim local/share/nvim/site/pack/packer/start/packer.nvim

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:focal
          shell: bash
          options: -v ${{ github.workspace }}/local:/root/.local -v ${{ github.workspace }}/config/nvim/init.lua:/root/.config/nvim/init.lua -v ${{ github.workspace }}/ts-install-all.mjs:/root/script.mjs -v ${{ github.workspace }}/ts-update.mjs:/root/update.mjs
          run: |
            apt-get update -y && apt-get upgrade -y
            apt install build-essential git curl wget -y
            curl -sL https://deb.nodesource.com/setup_18.x | bash
            apt-get install nodejs -y
            wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
            chmod a+x ./nvim.appimage
            ./nvim.appimage --appimage-extract
            ./squashfs-root/usr/bin/nvim --version
            ./squashfs-root/usr/bin/nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
            ./squashfs-root/usr/bin/nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
            ./squashfs-root/usr/bin/nvim --headless -c 'TSConfigInfo' -c 'quitall'
            node /root/script.mjs
            node /root/update.mjs

      - name: Zip Binary
        run: |
          zip -j linux.zip local/share/nvim/site/pack/packer/start/nvim-treesitter/parser/*

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: |
            linux.zip

  windows:
    name: Build for windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        run: |
          git clone --depth 1 https://github.com/wbthomason/packer.nvim local/share/nvim/site/pack/packer/start/packer.nvim

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:focal
          shell: bash
          options: -v ${{ github.workspace }}/local:/root/.local -v ${{ github.workspace }}/config/nvim/init.lua:/root/.config/nvim/init.lua -v ${{ github.workspace }}/ts-install-all.mjs:/root/script.mjs -v ${{ github.workspace }}/ts-update.mjs:/root/update.mjs
          run: |
            apt-get update -y && apt-get upgrade -y
            apt install build-essential git curl wget mingw-w64 -y
            curl -sL https://deb.nodesource.com/setup_18.x | bash
            apt-get install nodejs -y
            wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
            chmod a+x ./nvim.appimage
            ./nvim.appimage --appimage-extract
            ./squashfs-root/usr/bin/nvim --version
            ./squashfs-root/usr/bin/nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
            ./squashfs-root/usr/bin/nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
            ./squashfs-root/usr/bin/nvim --headless -c 'TSConfigInfo' -c 'quitall'
            node /root/script.mjs
            node /root/update.mjs

      - name: Zip Binary
        run: |
          zip -j windows.zip local/share/nvim/site/pack/packer/start/nvim-treesitter/parser/*

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: |
            windows.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux, windows]
    strategy:
      matrix:
        tag: [linux, windows]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.tag }}
          path: files

      - name: Unzip Binary
        run: |
          unzip -j files/${{ matrix.tag }}.zip -d files
          mv files/${{ matrix.tag }}.zip all.zip

      - name: Create Body Release
        run: |
          echo "BUILD: $(date '+%Y-%m-%d')" > body.md
          echo "<details>" >> body.md
          echo -e "  <summary>click to show supported parser ($(ls files | wc -l))</summary>\n" >> body.md
          for parser in $(ls files | sort); do echo "  - $parser" >> body.md; done
          echo -e "\n</details>" >> body.md

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ matrix.tag }}
          prerelease: true
          name: ${{ matrix.tag }}
          artifacts: all.zip
          bodyFile: body.md

  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 6
